{"version":3,"sources":["Navbar.js","components/TotalsTable.js","useFetch.js","Totals.js","components/SortingTable.js","Season.js","Home.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","to","TotalsTable","columns","data","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","style","styles","thead","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","isChampion","isRunnerUp","cells","cell","getCellProps","td","value","champion","runnerup","backgroundColor","padding","border","useFetch","url","useState","setData","isPending","setIsPending","error","setError","useEffect","abortCont","AbortController","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort","Totals","useMemo","array","tempColumns","length","field","fieldLow","toString","replace","push","Header","accessor","toLowerCase","records","rec","owner","seasons","wins","losses","ties","pointsfor","toFixed","pointsagainst","moves","playoffs","winpct","avgfinish","SortedTable","isTeamName","id","teamName","width","Home","year","setYear","rank","align","onChange","e","target","season","createSelectItems","App","exact","path","Season","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e56b8a1.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <h1 className=\"navbar\">COPAH Fantasy Football</h1>\r\n            <div className=\"links\">\r\n                <Link to=\"/\">Home</Link>\r\n                <Link to=\"/Seasons\">Seasons</Link>\r\n                <Link to=\"/Totals\">Totals</Link>\r\n\r\n            </div>\r\n        </nav>\r\n      );\r\n}\r\n \r\nexport default Navbar;\r\n","import { useSortBy, useTable } from \"react-table\";\r\n\r\nexport default function TotalsTable({columns,data}) {\r\n    // Use the useTable Hook to send the columns and data to build the table\r\n\r\n    const {\r\n        getTableProps, // table props from react-table\r\n        getTableBodyProps, // table body props from react-table\r\n        headerGroups, // headerGroups, if your table has groupings\r\n        rows, // rows for the table based on the data passed\r\n        prepareRow // Prepare the row (this function needs to be called for each row before getting the row props)\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data\r\n        },\r\n        useSortBy\r\n    );\r\n\r\n\r\n    return (\r\n        <table {...getTableProps()}>\r\n            <thead style={styles.thead}>\r\n                {headerGroups.map((headerGroup) => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map((column) => (\r\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                                {column.render(\"Header\")}\r\n                                <span>\r\n                                    {column.isSorted ? (column.isSortedDesc ? \" ðŸ”½\" : \" ðŸ”¼\") : \"\"}\r\n                                </span>\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()} style={isChampion(row) || isRunnerUp(row)}>\r\n                            {row.cells.map((cell) => {\r\n                                return <td {...cell.getCellProps()} style={styles.td}>\r\n                                    {cell.render(\"Cell\")}\r\n                                </td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n\r\n}\r\n\r\nfunction isChampion(row) {\r\n\r\n     if (row.cells[10].value) {\r\n        return styles.champion\r\n     }\r\n}\r\n;\r\n\r\nfunction isRunnerUp(row) {\r\n\r\n    if (row.cells[9].value) {\r\n       return styles.runnerup\r\n    }\r\n}\r\n;\r\n\r\nconst styles = {\r\n    thead: {\r\n        backgroundColor: \"green\",\r\n    },\r\n    td: {\r\n        padding: \"10px\",\r\n        border: \"dotted 1px black\",\r\n    },\r\n    champion: {\r\n        backgroundColor: \"gold\",\r\n    },\r\n    runnerup: {\r\n        backgroundColor: \"silver\",\r\n    },\r\n};","import { useState, useEffect } from 'react';\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setData] = useState(null);\r\n  const [isPending, setIsPending] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const abortCont = new AbortController();\r\n\r\n      fetch(url, { signal: abortCont.signal })\r\n      .then(res => {\r\n        if (!res.ok) { // error coming back from server\r\n          throw Error('could not fetch the data for that resource');\r\n        } \r\n        return res.json();\r\n      })\r\n      .then(data => {\r\n        setIsPending(false);\r\n        setData(data);\r\n        setError(null);\r\n      })\r\n      .catch(err => {\r\n        if (err.name === 'AbortError') {\r\n          console.log('fetch aborted')\r\n        } else {\r\n          // auto catches network / connection error\r\n          setIsPending(false);\r\n          setError(err.message);\r\n        }\r\n      })\r\n\r\n    // abort the fetch\r\n    return () => abortCont.abort();\r\n  }, [url])\r\n\r\n  return { data, isPending, error };\r\n}\r\n \r\nexport default useFetch;","import { useMemo, useState } from \"react\";\r\nimport TotalsTable from \"./components/TotalsTable\";\r\n// import BasicTable from \"./components/BasicTable\";\r\nimport useFetch from \"./useFetch\";\r\n\r\nconst Totals = () => {\r\n    // const [parsed, setParsed] = useState(false);\r\n    // const [columns, setColumns] = useState([]);\r\n    // const [columns, setColumns] = useState([])\r\n    // const [year, setYear] = useState(2020);\r\n\r\n    const url = \"https://script.google.com/macros/s/AKfycbxgs-DrXBIjhgVZeOevCOHtrzvRRRFAVyuaFly8to7Lw4uYut8IrjqWZ4UG3yX9N3bQbA/exec\";\r\n\r\n    const { data, isPending, error } = useFetch(url);\r\n\r\n     const columns = useMemo(\r\n        () => {\r\n            if (data) {\r\n                var array = [];\r\n                // var tempColumns = [\"Rank\", \"Owner\", \"Name\", \"Wins\", \"Losses\", \"Ties\", \"Points For\", \"Points Against\", \"Moves\", \"Playoffs\", \"RunnerUp\", \"Champion\"];\r\n                var tempColumns = data.columns\r\n                for (let i = 0; i < tempColumns.length; i++) {\r\n                    var field = tempColumns[i]\r\n                    var fieldLow = field.toString()\r\n                    fieldLow = fieldLow.replace(/\\s/g, '');\r\n                    array.push({\r\n                        Header: field,\r\n                        accessor: fieldLow.toLowerCase()\r\n                    })\r\n                }\r\n                return array\r\n            }\r\n        },\r\n        [data]\r\n    );\r\n\r\n    const records = useMemo(\r\n        () => {\r\n            if (data) {\r\n                var array = [];\r\n\r\n                // const { year, rec } = data.seasons[0]\r\n                for (let i = 0; i < data[\"Totals\"].length; i++) {\r\n                    var rec = data[\"Totals\"][i]\r\n                    array.push({\r\n                        owner: rec[0],\r\n                        seasons: rec[1],\r\n                        wins: rec[2],\r\n                        losses: rec[3],\r\n                        ties: rec[4],\r\n                        pointsfor: rec[5].toFixed(2),\r\n                        pointsagainst: rec[6].toFixed(2),\r\n                        moves: rec[7],\r\n                        playoffs: rec[8],\r\n                        runnerup: rec[9],\r\n                        champion: rec[10],\r\n                        winpct: rec[11].toFixed(3),\r\n                        avgfinish: rec[12].toFixed(2),\r\n                    })\r\n                }\r\n                return array\r\n            }\r\n        },\r\n        [data]\r\n    );\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <h2>COPAH FFL Totals</h2>\r\n            {error && <div>{error}</div>}\r\n            {isPending && <div>Loading...</div>}\r\n            {data && <div>\r\n                <TotalsTable columns={columns} data={records}/>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Totals;","import { useSortBy, useTable } from \"react-table\";\r\n\r\nexport default function SortedTable({ columns, data }) {\r\n    // Use the useTable Hook to send the columns and data to build the table\r\n\r\n    const {\r\n        getTableProps, // table props from react-table\r\n        getTableBodyProps, // table body props from react-table\r\n        headerGroups, // headerGroups, if your table has groupings\r\n        rows, // rows for the table based on the data passed\r\n        prepareRow // Prepare the row (this function needs to be called for each row before getting the row props)\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data\r\n        },\r\n        useSortBy\r\n    );\r\n\r\n\r\n    return (\r\n        <table {...getTableProps()}>\r\n            <thead style={styles.thead}>\r\n                {headerGroups.map((headerGroup) => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map((column) => (\r\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())} style={isTeamName(column.id)}>\r\n                                {column.render(\"Header\")}\r\n                                <span>\r\n                                    {column.isSorted ? (column.isSortedDesc ? \" ðŸ”½\" : \" ðŸ”¼\") : \"\"}\r\n                                </span>\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()} style={isChampion(row) || isRunnerUp(row)}>\r\n                            {row.cells.map((cell) => {\r\n                                return <td {...cell.getCellProps()} style={styles.td}>\r\n                                    {cell.render(\"Cell\")}\r\n                                </td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n\r\n}\r\n\r\nfunction isChampion(row) {\r\n\r\n     if (row.cells[11].value) {\r\n        return styles.champion\r\n     }\r\n}\r\n;\r\n\r\nfunction isRunnerUp(row) {\r\n\r\n    if (row.cells[10].value) {\r\n       return styles.runnerup\r\n    }\r\n}\r\n;\r\n\r\nfunction isTeamName(column) {\r\n\r\n    if (column===\"name\") {\r\n        return styles.teamName\r\n    }\r\n}\r\n;\r\n\r\nconst styles = {\r\n    thead: {\r\n        backgroundColor: \"green\",\r\n    },\r\n    td: {\r\n        padding: \"8px 5px\",\r\n        border: \"dotted 1px black\",\r\n    },\r\n    champion: {\r\n        backgroundColor: \"gold\",\r\n    },\r\n    runnerup: {\r\n        backgroundColor: \"silver\",\r\n    },\r\n    teamName: {\r\n        width: \"40%\",\r\n    }\r\n};","import { useMemo, useState } from \"react\";\r\nimport SortingTable from \"./components/SortingTable\";\r\nimport Totals from \"./Totals\";\r\n// import BasicTable from \"./components/BasicTable\";\r\nimport useFetch from \"./useFetch\";\r\n\r\nconst Home = () => {\r\n    // const [parsed, setParsed] = useState(false);\r\n    // const [columns, setColumns] = useState([]);\r\n    // const [columns, setColumns] = useState([])\r\n    const [year, setYear] = useState(2020);\r\n\r\n    const url = \"https://script.google.com/macros/s/AKfycbwhqOY0secls5WtwntQp-0-UCcXZO9Dp_D0_6Vs6_O_IGCB9e2PyfVhlRif4X2ui52ChA/exec\";\r\n\r\n    const { data, isPending, error } = useFetch(url);\r\n\r\n    const columns = useMemo(\r\n        () => {\r\n            if (data) {\r\n                var array = [];\r\n                var tempColumns = [\"Rank\", \"Owner\", \"Name\", \"Wins\", \"Losses\", \"Ties\", \"Points For\", \"Points Against\", \"Moves\", \"Playoffs\", \"RunnerUp\", \"Champion\"];\r\n                //var tempColumns = data.columns\r\n                for (let i = 0; i < tempColumns.length; i++) {\r\n                    var field = tempColumns[i]\r\n                    var fieldLow = field.toString()\r\n                    fieldLow = fieldLow.replace(/\\s/g, '');\r\n                    array.push({\r\n                        Header: field,\r\n                        accessor: fieldLow.toLowerCase()\r\n                    })\r\n                }\r\n                return array\r\n            }\r\n        },\r\n        [data]\r\n    );\r\n\r\n    const records = useMemo(\r\n        () => {\r\n            if (data) {\r\n                var array = [];\r\n\r\n                // const { year, rec } = data.seasons[0]\r\n                for (let i = 0; i < data[year].length; i++) {\r\n                    var rec = data[year][i]\r\n                    array.push({\r\n                        rank: rec[0],\r\n                        name: rec[1],\r\n                        wins: rec[2],\r\n                        losses: rec[3],\r\n                        ties: rec[4],\r\n                        pointsfor: rec[5],\r\n                        pointsagainst: rec[6],\r\n                        moves: rec[7],\r\n                        playoffs: rec[8],\r\n                        runnerup: rec[9],\r\n                        champion: rec[10],\r\n                        owner: rec[11]\r\n\r\n\r\n                    })\r\n                }\r\n                return array\r\n            }\r\n        },\r\n        [year, data]\r\n    );\r\n\r\n    function createSelectItems() {\r\n        let seasons = [];\r\n        for (let season = 2020; season > 2000; season--) {\r\n            seasons.push(<option key={season} value={season}>{season}</option>);\r\n        }\r\n        return seasons;\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <h2>COPAH FFL Season History</h2>\r\n            {error && <div>{error}</div>}\r\n            {isPending && <div>Loading...</div>}\r\n            {data && <div>\r\n                {/* <BasicTable columns={columns} data={records} /> */}\r\n                <div align=\"right\">\r\n                    <form>\r\n                        <select\r\n                            value={year}\r\n                            onChange={(e) => setYear(e.target.value)}>\r\n                            {createSelectItems()}\r\n                        </select>\r\n                    </form>\r\n                </div>\r\n                <SortingTable columns={columns} data={records} />\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Home;","const Home = () => {\r\n    return ( \r\n        <div>This is a home page</div>\r\n     );\r\n}\r\n \r\nexport default Home;","import Navbar from './Navbar';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Totals from './Totals';\nimport Season from './Season';\nimport Home from './Home';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route exact path=\"/totals\">\n            <Totals />\n          </Route>\n          <Route exact path=\"/seasons\">\n            <Season />\n          </Route>\n\n          <Route path=\"*\">\n            <div>404 Page not found.</div>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}